open Ctypes

(* This Types_generated module is an instantiation of the Types
   functor defined in the type_description.ml file. It's generated by
   a C program that Dune creates and runs behind the scenes. *)

module Types = Types_generated

module Functions (F : Ctypes.FOREIGN) = struct
  open F

  type matrix
  let matrix : matrix structure typ = structure "mat"
  let arr = field matrix "arr" (ptr float)
  let rows = field matrix "rows" size_t
  let cols = field matrix "cols" size_t
  let dim3 = field matrix "dim3" size_t

  let gpu_init = foreign "ocl_init" (void @-> returning void)

  let ocl_finish = foreign "ocl_finish" (void @-> returning void)

  let cc_fully_conntected_ff = foreign "fully_connected_ff"
                                 (ptr matrix @->
                                    ptr matrix @->
                                      ptr matrix @->
                                        ptr matrix @-> long @->
                                          returning int)

  let cc_fully_conntected_bp = foreign "fully_connected_bp"
                                 (ptr matrix @->
                                    ptr matrix @->
                                      ptr matrix @->
                                        ptr matrix @->
                                          ptr matrix @->
                                            ptr matrix @->
                                              ptr matrix @->
                                                long @->
                                                  bool @->
                                                    returning int)

  let c_mat = ptr matrix

  let cc_conv2d_ff = foreign "conv_ff"
                       (c_mat @-> c_mat @-> c_mat @-> long @->
                          ulong @-> ulong @-> ulong @-> ulong @-> c_mat @->
                            returning int)
 
  let cc_conv2d_bp = foreign "conv_bp"
                       (c_mat @-> c_mat @-> c_mat @-> c_mat @-> c_mat @-> c_mat @-> c_mat @->
                          long @-> ulong @-> ulong @-> bool @-> 
                            returning int)

  let cc_pooling2d_ff = foreign "pooling_ff"
                       (c_mat @-> long @->
                          ulong @-> ulong @-> ulong @-> ulong @-> ulong @->
                            c_mat @-> returning int)
 
  let cc_pooling2d_bp = foreign "pooling_bp"
                       (c_mat @-> c_mat @-> c_mat @->
                          long @-> ulong @-> ulong @-> ulong @-> ulong @-> bool @-> 
                            returning int)

  let cc_mat_free = foreign "mat_free" (ptr matrix @-> returning void)

  let cc_mat_print = foreign "mat_print" (ptr matrix @-> returning void)

  let cc_mat_sub = foreign "mat_sub"
                     (ptr matrix @-> ptr matrix @-> ptr matrix @->
                        returning int)
  
  let cc_mat_scale = foreign "mat_scale"
                     (ptr matrix @-> ptr matrix @-> float @->
                        returning int)

  let cc_vec_sum = foreign "vec_sum"
                     (ptr matrix @-> returning float)

end
